# both before_script sections require following variables
# NPM specific variables:
#   SSH_KEY: base64-encoded private RSA key

.beforeScriptTestWithVaultier: &preTestWithVaultier
  - mkdir ~/.ssh/
  - echo ${SSH_KEY} | base64 -d > ~/.ssh/id_rsa
  - chmod 0400 ~/.ssh/id_rsa
  - eval `ssh-agent -s` && ssh-add ~/.ssh/id_rsa
  - echo -e 'Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null' > ~/.ssh/config
  - wget ${VAULTIER_RELEASE_LINK} -O /usr/local/bin/vaultier > /dev/null 2>&1
  - chmod +x /usr/local/bin/vaultier
  - npm set unsafe-perm true
  - npm set progress=false
  - export CFG_JSON_PATH=${PLUGIN_SECRET_OUTPUT_PATH}
  - vaultier
  
.BeforeScriptTestWithoutVaultier: &preTestWithoutVaultier
  - mkdir ~/.ssh/
  - echo ${SSH_KEY} | base64 -d > ~/.ssh/id_rsa
  - chmod 0400 ~/.ssh/id_rsa
  - eval `ssh-agent -s` && ssh-add ~/.ssh/id_rsa
  - echo -e 'Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null' > ~/.ssh/config
  - npm set unsafe-perm true
  - npm set progress=false

# .ciTestSecrets requires following variables
# Vaultier specific variables:
#   VAULTIER_VAULT_ADDR: https://vault.co.uk
#   VAULTIER_VAULT_TOKEN: sgsdfgdfghfsggdsfg
#   VAULTIER_BRANCH: ${CI_COMMIT_REF_NAME}
#   VAULTIER_SECRET_SPECS_PATH: secrets.yaml
#   VAULTIER_RUN_CAUSE: test
#   VAULTIER_OUTPUT_FORMAT: dotenv
#   VAULTIER_SECRET_OUTPUT_PATH: .env
# before_script specific varialbes:
#   VAULTIER_RELEASE_LINK: https://github.com/vranystepan/vaultier/releases/download/v0.0.4/vaultier-v0.0.4

# also make sure you have specified 'only' conditions
# Examples for MR:
#   test:mr:
#     extends: .ciTestNoSecrets
#     only: merge_requests
#
#   lint:mr:
#     extends: .ciLint
#     only: merge_requests
#
# Examples for delivery:
#   test:delivery:
#     extends: .ciTestNoSecrets
#     only:
#       variables:
#         - $CI_PIPELINE_SOURCE == "push"
#       refs: ["master", "stage", "development"]

#   lint:delivery:
#     extends: .ciLint
#       only:
#       variables:
#         - $CI_PIPELINE_SOURCE == "push"
#       refs: ["master", "stage", "development"]
.ciTestNoSecrets:
  image: ${NODE_IMAGE}
  stage: test
  before_script: *preTestWithoutVaultier
  script:
    - npm run ci-test
  # coverage report for Jest output (--coverage flag)
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    reports:
      junit: junit.xml
      
.ciTestSecrets:
  image: ${NODE_IMAGE}
  stage: test
  before_script: *preTestWithVaultier
  variables:
    VAULTIER_RUN_CAUSE: test
    VAULTIER_OUTPUT_FORMAT: dotenv
    VAULTIER_SECRET_OUTPUT_PATH: /tmp/secrets.json
  script:
    - npm ci
    - npm run ci-test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    reports:
      junit: junit.xml
      
.ciLint:
  image: ${NODE_IMAGE}
  stage: test
  variables:
  before_script: *preTestWithoutVaultier
  script:
    - npm ci
    - npm run ci-lint
  allow_failure: true
  artifacts:
    reports:
      junit: lint.xml
