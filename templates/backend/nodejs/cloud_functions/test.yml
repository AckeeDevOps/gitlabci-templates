# This file belongs to Ackee CICD suite for Firebase Cloud functions

.beforeScriptTestWithVaultier: &preTestWithVaultier
  #  fixed values for test
  - export VAULTIER_BRANCH=${CI_COMMIT_REF_NAME}
  - export CFG_JSON_PATH=${VAULTIER_SECRET_OUTPUT_PATH}
  - export VAULTIER_SECRET_SPECS_PATH=secrets.yaml
  - export VAULTIER_RUN_CAUSE=test
  - export VAULTIER_OUTPUT_FORMAT=dotenv
  - export VAULTIER_SECRET_OUTPUT_PATH=/tmp/secrets.json
  # /fixed values for test
  - mkdir ~/.ssh/
  - echo ${SSH_KEY} | base64 -d > ~/.ssh/id_rsa
  - chmod 0400 ~/.ssh/id_rsa
  - eval `ssh-agent -s` && ssh-add ~/.ssh/id_rsa
  - echo -e 'Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null' > ~/.ssh/config
  - wget ${VAULTIER_RELEASE_LINK} -O /usr/local/bin/vaultier > /dev/null 2>&1
  - chmod +x /usr/local/bin/vaultier
  - npm set unsafe-perm true
  - npm set progress=false
  - npm set loglevel=error
  - export JOBS=max
  - vaultier

.beforeScriptTestWithoutVaultier: &preTestWithoutVaultier
  - mkdir ~/.ssh/
  - echo ${SSH_KEY} | base64 -d > ~/.ssh/id_rsa
  - chmod 0400 ~/.ssh/id_rsa
  - eval `ssh-agent -s` && ssh-add ~/.ssh/id_rsa
  - echo -e 'Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null' > ~/.ssh/config
  - npm set unsafe-perm true
  - npm set progress=false
  - npm set loglevel=error
  - export JOBS=max

# Base test prefab with secrets, 'only' directive required
.ciTestSecrets:
  image: ${NODE_IMAGE}
  stage: test
  before_script: *preTestWithVaultier
  variables:
    # SSH_KEY: must be specified globally
    # VAULTIER_TOKEN: must be specified globally
  script:
    - cd functions
    - npm install
    - npm run ci-test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/ # Jest
  artifacts:
    reports:
      junit: junit.xml

# Test prefab with secrets for pushes
.ciTestSecretsDelivery:
  extends: .ciTestSecrets
  only:
    variables:
      - $CI_PIPELINE_SOURCE == "push"
    refs: ["master", "stage", "development"]

# Test prefab with serets for merge requests
.ciTestSecretsMergeRequest:
  extends: .ciTestSecrets
  only: ["merge_requests"]

# Base test prefab without secrets, 'only' directive required
.ciTest:
  image: ${NODE_IMAGE}
  stage: test
  before_script: *preTestWithoutVaultier
  variables:
    # SSH_KEY: must be specified globally
  script:
    - cd functions
    - npm install
    - npm run ci-test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/ # Jest
  artifacts:
    reports:
      junit: junit.xml

# Test prefab without secrets for pushes
.ciTestDelivery:
  extends: .ciTest
  only:
    variables:
      - $CI_PIPELINE_SOURCE == "push"
    refs: ["master", "stage", "development"]

# Test prefab without serets for merge requests
.ciTestMergeRequest:
  extends: .ciTest
  only: ["merge_requests"]

# Base lint prefab, 'only' directive required
.ciLint:
  image: ${NODE_IMAGE}
  stage: test
  variables:
  before_script: *preTestWithoutVaultier
  script:
    - cd functions
    - npm install
    - npm run ci-lint
  allow_failure: true
  artifacts:
    reports:
      junit: lint.xml

# Lint prefab for pushes
.ciLintDelivery:
  extends: .ciLint
  only:
    variables:
      - $CI_PIPELINE_SOURCE == "push"
    refs: ["master", "stage", "development"]

# Lint prefab for merge requests
.ciLintMergeRequest:
  extends: .ciLint
  only: ["merge_requests"]
