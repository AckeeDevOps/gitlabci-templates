# This file belongs to Ackee CICD suite for Firebase Cloud functions

# Required Variables
#   VAULTIER_RELEASE_LINK
#   SSH_KEY
#   FIREBASE_TOKEN <- required directly by firebase-cli tools
#   VAULTIER_VAULT_ADDR
#   VAULTIER_VAULT_TOKEN
# Optional Variables
#   CI_ENVIRONMENT_NAME
#   VAULTIER_SECRET_OUTPUT_PATH
#   VAULTIER_SECRET_SPECS_PATH
#   VAULTIER_RUN_CAUSE
#   VAULTIER_OUTPUT_FORMAT

.beforeScriptDeployWithVaultier: &preDeployWithVaultier
  #  set default values for deployment if needed
  - if [ -z "${VAULTIER_ENVIRONMENT}" ]; then export VAULTIER_BRANCH=${CI_ENVIRONMENT_NAME}; fi
  - if [ -z "${VAULTIER_SECRET_SPECS_PATH}" ]; then export VAULTIER_SECRET_SPECS_PATH=secrets.yaml; fi
  - if [ -z "${VAULTIER_OUTPUT_FORMAT}" ]; then export VAULTIER_OUTPUT_FORMAT=dotenv; fi
  - if [ -z "${VAULTIER_SECRET_OUTPUT_PATH}" ]; then export VAULTIER_SECRET_OUTPUT_PATH=${CI_PROJECT_DIR}/functions/credentials.json; fi
  # /fixed values for deploy
  - mkdir ~/.ssh/
  - echo ${SSH_KEY} | base64 -d > ~/.ssh/id_rsa
  - chmod 0400 ~/.ssh/id_rsa
  - eval `ssh-agent -s` && ssh-add ~/.ssh/id_rsa
  - echo -e 'Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null' > ~/.ssh/config
  - wget ${VAULTIER_RELEASE_LINK} -O vaultier.tar.gz > /dev/null 2>&1
  - tar -xvf vaultier.tar.gz && rm vaultier.tar.gz
  - mv vaultier /usr/local/bin/vaultier
  - chmod +x /usr/local/bin/vaultier
  - npm set unsafe-perm true
  - npm set progress=false
  - npm set loglevel=error
  - npm install -g firebase-tools > /dev/null 2>&1
  - export JOBS=max
  - vaultier

.deployBranchSecrets:
  image: node:latest
  stage: deploy
  before_script: *preDeployWithVaultier
  allow_failure: false
  variables:

.deployBranchSecretsMater:
  extends: .deployBranchSecrets
  variables:
    DEPLOY_COMMAND: 'run deploy-production'
  script:
    - cd functions
    - npm install
    - eval "${DEPLOY_COMMAND}"
  only:
    refs: ["master"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
  when: manual
  
.deployBranchSecretsStage:
  extends: .deployBranchSecrets
  script:
    - cd functions
    - npm install
    - npm run deploy-stage
  only:
    refs: ["stage"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
  environment:
    name: stage
  when: manual
  
.deployBranchSecretsDevelopment:
  extends: .deployBranchSecrets
  script:
    - cd functions
    - npm install
    - npm run deploy-dev
  only:
    refs: ["development"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
  environment:
    name: development
