.beforeScriptDeploySecrets: &preDeploySecrets
  #  Validate variables
  - echo validation TBD
  # /Validate variables
  #  Prepare ssh/git
  - mkdir ~/.ssh/
  - echo ${SSH_KEY} | base64 -d > ~/.ssh/id_rsa
  - chmod 0400 ~/.ssh/id_rsa
  - eval `ssh-agent -s` && ssh-add ~/.ssh/id_rsa
  - echo -e 'Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null' > ~/.ssh/config
  # /Prepare ssh/git
  #  Prepare Google auth
  - echo "${GCLOUD_SA_KEY}" | base64 -d > /tmp/key.json
  - export GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json
  # /Prepare Google auth
  - npm set unsafe-perm true
  - npm set progress=false
  - npm set loglevel=error
  - npm install -g serverless
  - export JOBS=max
  
.deployBranchSecrets:
  image: node:8
  stage: deploy
  before_script: *preDeploySecrets
  allow_failure: false
  variables:
  
.deployBranchSecretsDevelopment:
  extends: .deployBranchSecrets
  variables:
    GCLOUD_SA_KEY: ${GCLOUD_SA_KEY_DEVELOPMENT}
  script:
    - npm i
    - serverless deploy --stage=development --gcpProject="${GCLOUD_PROJECT_ID_DEVELOPMENT}"
  only:
    refs: ["development"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
  environment:
    name: development
    
.deployBranchSecretsStage:
  extends: .deployBranchSecrets
  variables:
    GCLOUD_SA_KEY: ${GCLOUD_SA_KEY_STAGE}
  script:
    - npm i
    - serverless deploy --stage=stage --gcpProject="${GCLOUD_PROJECT_ID_STAGE}"
  only:
    refs: ["stage"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
  environment:
    name: stage
    
.deployBranchSecretsMaster:
  extends: .deployBranchSecrets
  variables:
    GCLOUD_SA_KEY: ${GCLOUD_SA_KEY_PRODUCTION}
  script:
    - npm i
    - serverless deploy --stage=production --gcpProject="${GCLOUD_PROJECT_ID_PRODUCTION}"
  only:
    refs: ["master"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
  environment:
    name: production
