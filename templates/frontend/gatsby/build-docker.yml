# Required:
#   SSH_KEY: Base64 encoded RSA private key

# Download Vaultier helper https://github.com/AckeeDevOps/vaultier/releases
.gatsbyBuild-downloadVaultier: &gatsbyBuild-downloadVaultier |
  wget "${VAULTIER_RELEASE_LINK}" -O vaultier.tar.gz > /dev/null 2>&1
  tar -xvf vaultier.tar.gz vaultier
  rm -rf vaultier.tar.gz
  mv vaultier /usr/local/bin/vaultier

# secrets injector is tiny javascript file which is pre-loaded with
# -r flag in the ci-build script
.gatsbyBuild-downloadSecretsInjector: &gatsbyBuild-downloadSecretsInjector |
  wget https://raw.githubusercontent.com/AckeeDevOps/gitlabci-templates/master/scripts/frontend/gatsby/injector.js -O injector.js > /dev/null 2>&1

# setVaultierEnvironment sets predictable variables
# no need to validate them in validateEnvironment
.gatsbyBuild-setVaultierEnvironment: &gatsbyBuild-setVaultierEnvironment |
  if [ -z "${VAULTIER_BRANCH}" ]; then export VAULTIER_BRANCH=${CI_COMMIT_REF_NAME}; fi
  if [ -z "${VAULTIER_SECRET_SPECS_PATH}" ]; then export VAULTIER_SECRET_SPECS_PATH=secrets.yaml; fi
  if [ -z "${VAULTIER_RUN_CAUSE}" ]; then export VAULTIER_RUN_CAUSE=delivery; fi
  if [ -z "${VAULTIER_OUTPUT_FORMAT}" ]; then export VAULTIER_OUTPUT_FORMAT=dotenv; fi
  if [ -z "${VAULTIER_SECRET_OUTPUT_PATH}" ]; then export VAULTIER_SECRET_OUTPUT_PATH=${CI_PROJECT_DIR}/secrets.json; fi

# Validation for both variants - with or without secrets
.gatsbyBuild-validateEnvironmentCommon: &gatsbyBuild-validateEnvironmentCommon |
  if [ -z "${SSH_KEY}" ]; then echo "SSH_KEY is required"; exit 1; fi
  if [ -z "${GCLOUD_SA_KEY}" ]; then echo "GCLOUD_SA_KEY is required"; exit 1; fi
  if [ -z "${GCLOUD_PROJECT_ID}" ]; then echo "GCLOUD_PROJECT_ID is required"; exit 1; fi

# Validation for variant with secrets
.gatsbyBuild-validateEnvironmentSecrets: &gatsbyBuild-validateEnvironmentSecrets |
  if [ -z "${VAULTIER_RELEASE_LINK}" ]; then echo "VAULTIER_RELEASE_LINK is required"; exit 1; fi
  if [ -z "${VAULTIER_VAULT_ADDR}" ]; then echo "VAULTIER_VAULT_ADDR is required"; exit 1; fi
  if [ -z "${VAULTIER_VAULT_TOKEN}" ]; then echo "VAULTIER_VAULT_TOKEN is required"; exit 1; fi

# login to Google Container Registry
.gatsbyBuild-initDockerGCR: &gatsbyBuild-initDockerGCR |
  echo "${GCLOUD_SA_KEY}" | base64 -d > /tmp/key.json
  cat /tmp/key.json | docker login -u _json_key --password-stdin "https://${GCR_DOMAIN}"

# build commands are always the same, the secrets logic is handled in 
# package.json file via build-ci script
.gatsbyBuild-buildDockerImage: &gatsbyBuild-buildDockerImage
  - docker build --build-arg SSH_KEY -t ${IMAGE_NAME}:${IMAGE_TAG} .
  - docker push ${IMAGE_NAME}:${IMAGE_TAG}

# Prefabs without secrets injection
.gatsbyBuildDocker:
  stage: build
  image: docker
  before_script:
    - *gatsbyBuild-validateEnvironmentCommon
    - *gatsbyBuild-initDockerGCR
  script: *gatsbyBuild-buildDockerImage

.gatsbyBuildDockerDevelopment:
  extends: .gatsbyBuildDocker
  only:
    refs: ["development"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"

.gatsbyBuildDockerStage:
  extends: .gatsbyBuildDocker
  only:
    refs: ["stage"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"

.gatsbyBuildDockerMaster:
  extends: .gatsbyBuildDocker
  only:
    refs: ["master"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"

# prefabs with secrets injection
.gatsbyBuildDockerSecrets:
  stage: build
  image: docker
  before_script:
    - *gatsbyBuild-setVaultierEnvironment
    - *gatsbyBuild-validateEnvironmentCommon
    - *gatsbyBuild-validateEnvironmentSecrets
    - *gatsbyBuild-initDockerGCR
    - *gatsbyBuild-downloadVaultier
    - *gatsbyBuild-downloadSecretsInjector
    - vaultier
  script: *gatsbyBuild-buildDockerImage
      
.gatsbyBuildDockerSecretsDevelopment:
  extends: .gatsbyBuildDockerSecrets
  only:
    refs: ["development"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
      
.gatsbyBuildDockerSecretsStage:
  extends: .gatsbyBuildDockerSecrets
  only:
    refs: ["stage"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
      
.gatsbyBuildDockerSecretsMaster:
  extends: .gatsbyBuildDockerSecrets
  only:
    refs: ["master"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"

