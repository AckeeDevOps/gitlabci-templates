# Required:
#   SSH_KEY: Base64 encoded RSA private key

.downloadVaultier: &downloadVaultier |
  wget "${VAULTIER_RELEASE_LINK}" -O vaultier.tar.gz > /dev/null 2>&1
  tar -xvf vaultier.tar.gz vaultier
  rm -rf vaultier.tar.gz
  mv vaultier /usr/local/bin/vaultier

# setVaultierEnvironment sets predictable variables and validates
# existence of VAULTIER_VAULT_TOKEN and VAULTIER_VAULT_ADDR
.setVaultierEnvironment: &setVaultierEnvironment |
  if [ -z "${VAULTIER_BRANCH}" ]; then export VAULTIER_BRANCH=${CI_COMMIT_REF_NAME}; fi
  if [ -z "${VAULTIER_SECRET_SPECS_PATH}" ]; then export VAULTIER_SECRET_SPECS_PATH=secrets.yaml; fi
  if [ -z "${VAULTIER_RUN_CAUSE}" ]; then export VAULTIER_RUN_CAUSE=delivery; fi
  if [ -z "${VAULTIER_OUTPUT_FORMAT}" ]; then export VAULTIER_OUTPUT_FORMAT=dotenv; fi
  if [ -z "${VAULTIER_SECRET_OUTPUT_PATH}" ]; then export VAULTIER_SECRET_OUTPUT_PATH=${CI_PROJECT_DIR}/secrets.json; fi
  if [ -z "${VAULTIER_VAULT_ADDR}" ]; then echo "VAULTIER_VAULT_ADDR is required"; exit 1; fi
  if [ -z "${VAULTIER_VAULT_TOKEN}" ]; then echo "VAULTIER_VAULT_TOKEN is required"; exit 1; fi 

.gatsbyBuildDockerSecrets:
  stage: build
  image: node:latest
  before_script:
    - *downloadVaultier
    - *setVaultierEnvironment
    - vaultier
  script:
    - echo works
      
.gatsbyBuildDockerSecretsDevelopment:
  extends: .gatsbyBuild
  only:
    refs: ["development"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
      
.gatsbyBuildDockerSecretsStage:
  extends: .gatsbyBuild
  only:
    refs: ["stage"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"
      
.gatsbyBuildDockerSecretsMaster:
  extends: .gatsbyBuild
  only:
    refs: ["master"]
    variables:
      - $CI_PIPELINE_SOURCE == "push"

